@page "/countries"
@using CurrieTechnologies.Razor.SweetAlert2
@using Orders.Frontend.Repositories
@using Orders.Shared.Entities
 
<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-globe-americas" /> Países
            <a class="btn btn-primary btn-sm float-end" href="/countries/create"><i class="bi bi-plus-square" /> Nuevo País</a>
        </span>
    </div>
    <div class="card-body">
        <GenericList MyList="Countries">
            <Body>
                <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    <div>
                        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="bi bi-funnel" /> Filtrar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="bi bi-x-circle" /> Limpiar</button>
                    </div>
                </div>

                <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPageAsync" />

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>País</th>
                            <th style="width:210px">Estados / Departamentos</th>
                            <th style="width:168px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var country in Countries!)
                        {
                            <tr>
                                <td><a href="/countries/details/@country.Id"> @country.Name</a></td>
                                <td>@country.StatesNumber</td>
                                <td>
                                    <a href="/countries/edit/@country.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil" /> Editar</a>
                                    @* <button @onclick=@(() => DeleteAsycn(country)) class="btn btn-sm btn-danger"><i class="bi bi-trash" /> Borrar</button> *@
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>



@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;
    [Inject] private IRepository Repository { get; set; } = null!;

    [Parameter, SupplyParameterFromQuery] public string Page { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery] public string Filter { get; set; } = string.Empty;

    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
          if (!string.IsNullOrWhiteSpace(Page))
            {
                page = Convert.ToInt32(Page);
            }
        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"api/countries?page={page}";
        if (!string.IsNullOrEmpty(Filter))
        {
            url += $"&filter={Filter}";
        }
        var responseHttp = await Repository.GetAsync<List<Country>>(url);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        Countries = responseHttp.Response;
        return true;
    }

    private async Task LoadPagesAsync()
    {
         var url = "api/countries/totalPages";
    if (!string.IsNullOrEmpty(Filter))
    {
        url += $"?filter={Filter}";
    }

    var responseHttp = await Repository.GetAsync<int>(url);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = responseHttp.Response;
       
    }
private async Task CleanFilterAsync()
{
    Filter = string.Empty;
    await ApplyFilterAsync();
}

private async Task ApplyFilterAsync()
{
    int page = 1;
    await LoadAsync(page);
    await SelectedPageAsync(page);
}

    private async Task LoadAsync()
    {
        var responseHppt = await Repository.GetAsync<List<Country>>("api/countries");
        if (responseHppt.Error)
        {
            var message = await responseHppt.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Countries = responseHppt.Response!;
    }

    private async Task DeleteAsync(Country country)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el país: {country.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"api/countries/{country.Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await SweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}


